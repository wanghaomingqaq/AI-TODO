{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-17ffa8e6\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_el_button, {\n    type: \"success\",\n    round: \"\",\n    onClick: $options.submitHupu,\n    style: {\n      \"margin-top\": \"5px\"\n    }\n  }, {\n    default: _withCtx(() => [_createTextVNode(\" 今天资讯 \")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _ctx.items.length > 0 ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.items, (item, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: \"list-item\"\n    }, _toDisplayString(item), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"。。。\"))]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createVNode","_component_el_button","type","round","onClick","$options","submitHupu","style","default","_withCtx","_createTextVNode","_","_ctx","items","length","_hoisted_1","_Fragment","_renderList","item","index","class","_hoisted_2"],"sources":["/home/workspace/AI-Todo/Frontend/src/components/HupuForm.vue"],"sourcesContent":["<template>\n    <div>\n      <el-button type=\"success\" round @click=\"submitHupu\" style=\"margin-top: 5px;\">\n        今天资讯\n        </el-button>\n      <ul v-if=\"items.length > 0\">\n        <li v-for=\"(item, index) in items\" :key=\"index\" class=\"list-item\">{{ item }}</li>\n      </ul>\n      <p v-else>。。。</p>\n    </div>\n  </template>\n  \n  <script>\nimport axios from 'axios';\nimport {nanoid} from 'nanoid'\nimport { ElMessage } from 'element-plus'\nconst open4 = (errormsg) => {\n  ElMessage.error(errormsg)\n}\n  export default {\n  name: 'NoteForm',\n  data() {\n    return {\n      localInput: '', // 用于文本框的本地数据\n      recivedata: [],\n      showMessage: false,\n      loading: false\n    };\n  },\n  props:['addNote'],\n  methods: {\n\n    submitHupu() {\n      this.loading = true;\n\n      const dataTosend = {\n        text: this.localInput,\n        msgid: 7\n      };\n      axios.post('/login', dataTosend)\n        .then(response => {\n          console.log('服务器响应:', response.data);\n          this.recivedata = response.data.note;\n          this.showMessage = true;\n          // 处理服务器的响应\n          this.loading = false;\n          this.localInput = ''\n          console.log(\"--------------\")\n          console.log(this.recivedata)\n          console.log(\"--------------\")\n          // this.$emit('inputSubmitted', this.recivedata); // 向父组件发送事件\n          // const todoObj = {id:nanoid(),title:this.recivedata,done:false}\n    \n          const todoObj = this.recivedata.map(item => {\n            return {\n              id: nanoid(),\n              title: JSON.parse(item),\n              done: false\n            };\n          });\n\n          // 使用reduce按照label分组\n          const groupedByLabel = todoObj.reduce((acc, cur) => {\n              const label = cur.title.label;\n              if (!acc[label]) {\n                  acc[label] = [];\n              }\n              acc[label].push({\n                  content: cur.title.content,\n                  createTime: cur.title.createTime\n              });\n              return acc;\n          }, {});\n          console.log(groupedByLabel);\n          this.recivedata = ''\n          if (todoObj[0].title !== 'null') {\n            this.addNote(groupedByLabel);\n          } else {\n            open4(\"未提取到关键词！\")\n          }\n        })\n        .catch(error => {\n          const errorMessage = error.message; \n          open4(errorMessage)\n          console.error('请求错误:', error);\n          this.loading = false;\n          // 处理错误ee\n        });\n    },\n  }\n}\n</script>\n  \n  <style scoped>\n  .list-item {\n    padding: 10px;\n    border-bottom: 1px solid #ebebeb;\n  }\n  \n  .list-item:last-child {\n    border-bottom: none;\n  }\n  </style>\n  "],"mappings":";;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;uBACIC,mBAAA,CAQM,cAPJC,YAAA,CAEcC,oBAAA;IAFHC,IAAI,EAAC,SAAS;IAACC,KAAK,EAAL,EAAK;IAAEC,OAAK,EAAEC,QAAA,CAAAC,UAAU;IAAEC,KAAwB,EAAxB;MAAA;IAAA;;IAF1DC,OAAA,EAAAC,QAAA,CAEmF,MAE3E,CAJRC,gBAAA,CAEmF,QAE3E,E;IAJRC,CAAA;kCAKgBC,IAAA,CAAAC,KAAK,CAACC,MAAM,Q,cAAtBf,mBAAA,CAEK,MAPXgB,UAAA,I,kBAMQhB,mBAAA,CAAiFiB,SAAA,QANzFC,WAAA,CAMoCL,IAAA,CAAAC,KAAK,EANzC,CAMoBK,IAAI,EAAEC,KAAK;yBAAvBpB,mBAAA,CAAiF;MAA7CD,GAAG,EAAEqB,KAAK;MAAEC,KAAK,EAAC;wBAAeF,IAAI;qDAE3EnB,mBAAA,CAAiB,KARvBsB,UAAA,EAQgB,KAAG,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}