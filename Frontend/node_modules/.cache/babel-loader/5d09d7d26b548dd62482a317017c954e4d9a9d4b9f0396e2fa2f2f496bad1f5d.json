{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-53214c79\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"video-container\"\n};\nconst _hoisted_2 = {\n  ref: \"video\",\n  width: \"640\",\n  height: \"480\",\n  autoplay: \"\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_FullScreen = _resolveComponent(\"FullScreen\");\n  const _component_el_icon = _resolveComponent(\"el-icon\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"video\", _hoisted_2, null, 512 /* NEED_PATCH */), _createElementVNode(\"button\", {\n    class: \"fullscreen-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.goFullScreen && $options.goFullScreen(...args))\n  }, [_createVNode(_component_el_icon, {\n    size: \"20\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_FullScreen)]),\n    _: 1 /* STABLE */\n  })])]);\n}","map":{"version":3,"names":["class","ref","width","height","autoplay","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","onClick","_cache","args","$options","goFullScreen","_createVNode","_component_el_icon","size","default","_withCtx","_component_FullScreen","_"],"sources":["/home/workspace/vueProject/my-vue-project/src/components/HelloVideo.vue"],"sourcesContent":["<template>\r\n  <div class=\"video-container\">\r\n    <video ref=\"video\" width=\"640\" height=\"480\" autoplay></video>\r\n    <button class=\"fullscreen-button\" @click=\"goFullScreen\">\r\n      <el-icon size=\"20\"><FullScreen /></el-icon>\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name:\"HelloVideo\",\r\n  mounted() {\r\n    this.getVideo();\r\n  },\r\n  methods: {\r\n    async getVideo() {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n        this.$refs.video.srcObject = stream;\r\n      } catch (err) {\r\n        console.error(\"Error accessing the camera\", err);\r\n      }\r\n    },\r\n    goFullScreen() {\r\n      const videoElement = this.$refs.video;\r\n      if (videoElement.requestFullscreen) {\r\n        videoElement.requestFullscreen();\r\n      } else if (videoElement.mozRequestFullScreen) { /* Firefox */\r\n        videoElement.mozRequestFullScreen();\r\n      } else if (videoElement.webkitRequestFullscreen) { /* Chrome, Safari & Opera */\r\n        videoElement.webkitRequestFullscreen();\r\n      } else if (videoElement.msRequestFullscreen) { /* IE/Edge */\r\n        videoElement.msRequestFullscreen();\r\n      }\r\n    },\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.video-container {\r\n  position: relative;\r\n}\r\n\r\n.fullscreen-button {\r\n  position: absolute;\r\n  right: 10px;  /* 右下角定位 */\r\n  bottom: 10px;\r\n  background: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n</style>"],"mappings":";;;EACOA,KAAK,EAAC;AAAiB;;EACnBC,GAAG,EAAC,OAAO;EAACC,KAAK,EAAC,KAAK;EAACC,MAAM,EAAC,KAAK;EAACC,QAAQ,EAAR;;;;;uBAD9CC,mBAAA,CAKM,OALNC,UAKM,GAJJC,mBAAA,CAA6D,SAA7DC,UAA6D,+BAC7DD,mBAAA,CAES;IAFDP,KAAK,EAAC,mBAAmB;IAAES,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;MACpDG,YAAA,CAA2CC,kBAAA;IAAlCC,IAAI,EAAC;EAAI;IAJxBC,OAAA,EAAAC,QAAA,CAIyB,MAAc,CAAdJ,YAAA,CAAcK,qBAAA,E;IAJvCC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}