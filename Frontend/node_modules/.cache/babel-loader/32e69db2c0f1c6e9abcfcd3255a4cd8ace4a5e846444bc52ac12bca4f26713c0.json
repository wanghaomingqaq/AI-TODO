{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_table_column = _resolveComponent(\"el-table-column\");\n  const _component_el_table = _resolveComponent(\"el-table\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_el_button, {\n    type: \"success\",\n    round: \"\",\n    onClick: $setup.startRecognition,\n    loading: $setup.loading\n  }, {\n    default: _withCtx(() => [_createTextVNode(\" 开始语音识别 \")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"loading\"]), _createVNode(_component_el_table, {\n    data: $setup.transcripts,\n    style: {\n      \"width\": \"100%\"\n    }\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_table_column, {\n      prop: \"text\",\n      label: \"识别内容\",\n      width: \"100%\"\n    }), _createVNode(_component_el_table_column, {\n      prop: \"timestamp\",\n      label: \"时间戳\",\n      width: \"200\"\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"data\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_el_button","type","round","onClick","$setup","startRecognition","loading","default","_withCtx","_createTextVNode","_","_component_el_table","data","transcripts","style","_component_el_table_column","prop","label","width"],"sources":["/home/workspace/AI-Todo/Frontend/src/components/HelloVideo.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-button type=\"success\" round @click=\"startRecognition\" :loading=\"loading\">\r\n      开始语音识别\r\n    </el-button>\r\n    <el-table :data=\"transcripts\" style=\"width: 100%\">\r\n      <el-table-column\r\n        prop=\"text\"\r\n        label=\"识别内容\"\r\n        width=\"100%\">\r\n      </el-table-column>\r\n      <el-table-column\r\n        prop=\"timestamp\"\r\n        label=\"时间戳\"\r\n        width=\"200\">\r\n      </el-table-column>\r\n    </el-table>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onUnmounted } from 'vue';\r\n\r\nconst transcripts = ref([]);\r\nconst loading = ref(false);\r\nlet recognition;\r\n\r\nonMounted(() => {\r\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n  if (SpeechRecognition) {\r\n    recognition = new SpeechRecognition();\r\n    recognition.continuous = true;  // 连续识别\r\n    recognition.lang = 'zh-CN';     // 设置语言为简体中文\r\n\r\n    recognition.onresult = (event) => {\r\n      for (let i = event.resultIndex; i < event.results.length; i++) {\r\n        transcripts.value.push({\r\n          text: event.results[i][0].transcript,\r\n          timestamp: new Date().toLocaleTimeString()\r\n        });\r\n      }\r\n    };\r\n\r\n    recognition.onerror = (event) => {\r\n      console.error('语音识别错误:', event.error);\r\n      loading.value = false;\r\n    };\r\n  } else {\r\n    console.error('浏览器不支持 SpeechRecognition');\r\n  }\r\n});\r\n\r\nonUnmounted(() => {\r\n  if (recognition) {\r\n    recognition.stop();\r\n  }\r\n});\r\n\r\nfunction startRecognition() {\r\n  if (recognition && !loading.value) {\r\n    recognition.start();\r\n    loading.value = true;\r\n    recognition.onend = () => {\r\n      loading.value = false;\r\n    };\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";;;;;uBACEA,mBAAA,CAgBM,cAfJC,YAAA,CAEYC,oBAAA;IAFDC,IAAI,EAAC,SAAS;IAACC,KAAK,EAAL,EAAK;IAAEC,OAAK,EAAEC,MAAA,CAAAC,gBAAgB;IAAGC,OAAO,EAAEF,MAAA,CAAAE;;IAFxEC,OAAA,EAAAC,QAAA,CAEiF,MAE7E,CAJJC,gBAAA,CAEiF,UAE7E,E;IAJJC,CAAA;kCAKIX,YAAA,CAWWY,mBAAA;IAXAC,IAAI,EAAER,MAAA,CAAAS,WAAW;IAAEC,KAAmB,EAAnB;MAAA;IAAA;;IALlCP,OAAA,EAAAC,QAAA,CAMM,MAIkB,CAJlBT,YAAA,CAIkBgB,0BAAA;MAHhBC,IAAI,EAAC,MAAM;MACXC,KAAK,EAAC,MAAM;MACZC,KAAK,EAAC;QAERnB,YAAA,CAIkBgB,0BAAA;MAHhBC,IAAI,EAAC,WAAW;MAChBC,KAAK,EAAC,KAAK;MACXC,KAAK,EAAC;;IAddR,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}